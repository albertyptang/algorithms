package io.github.albertyptang.util.collection.linked;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * @author atang
 */
public class LinkedTest {

    private class TestObject {

        private int first;
        private int second;

        private TestObject(final int first, final int second) {
            this.first = first;
            this.second = second;
        }

        @Override // auto-generated by IntelliJ
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            TestObject that = (TestObject) o;

            if (first != that.first) return false;
            return second == that.second;
        }

        @Override // auto-generated by IntelliJ
        public int hashCode() {
            int result = first;
            result = 31 * result + second;
            return result;
        }
    }

    @Test
    public void append() throws Exception {
        final Linked<Long> linked = new Linked<Long>();
        linked.addToTail(null);
        assertEquals(linked.size, 1);

        linked.addToTail(2L);
        assertEquals(linked.size, 2);
        assertEquals(linked.getHead(), null);
        assertEquals(linked.getTail(), (Long) 2L);
    }

    @Test
    public void prepend() throws Exception {
        final Linked<Long> linked = new Linked<Long>();
        linked.addToHead(null);
        assertEquals(linked.size, 1);

        linked.addToHead(2L);
        assertEquals(linked.size, 2);
        assertEquals(linked.getHead(), (Long) 2L);
        assertEquals(linked.getTail(), null);
    }

    @Test
    public void delete() throws Exception {
        final Linked<Long> linked = new Linked<Long>();
        linked.addToTail(3L);
        linked.addToTail(4L);
        linked.addToTail(5L);

        linked.deleteTail();
        assertEquals(linked.size, 2);
        assertEquals(linked.searchFor(5L), null);

        linked.deleteHead();
        assertEquals(linked.size, 1);
        assertEquals(linked.searchFor(3L), null);

        assertEquals(linked.searchFor(4L), (Long) 4L); // middle element still remains

        linked.deleteHead();
        linked.deleteTail();
        linked.deleteHead();
        linked.deleteTail();
        assertEquals(linked.size, 0);
    }

    @Test
    public void search() throws Exception {
        final Linked<TestObject> linked = new Linked<TestObject>();
        linked.addToTail(new TestObject(1,2));

        final TestObject found = linked.searchFor(new TestObject(1,2));
        assertEquals(found, new TestObject(1,2));

        found.second = 3; // edit the test object within the list.

        final TestObject notFound = linked.searchFor(new TestObject(1,2));
        assertEquals(notFound, null);

        final TestObject foundAgain = linked.searchFor(new TestObject(1,3));
        assertEquals(foundAgain, new TestObject(1,3));
    }
}
