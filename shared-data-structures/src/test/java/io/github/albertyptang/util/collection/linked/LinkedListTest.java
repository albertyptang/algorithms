package io.github.albertyptang.util.collection.linked;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * @author atang
 */
public class LinkedListTest {

    private class TestObject {

        private int first;
        private int second;

        private TestObject(final int first, final int second) {
            this.first = first;
            this.second = second;
        }

        @Override // auto-generated by IntelliJ
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            TestObject that = (TestObject) o;

            if (first != that.first) return false;
            return second == that.second;
        }

        @Override // auto-generated by IntelliJ
        public int hashCode() {
            int result = first;
            result = 31 * result + second;
            return result;
        }
    }

    @Test
    public void append() throws Exception {
        final LinkedList<Long> linkedList = new LinkedList<Long>();
        linkedList.append(null);
        assertEquals(linkedList.size, 1);

        linkedList.append(2L);
        assertEquals(linkedList.size, 2);
        assertEquals(linkedList.getHead(), null);
        assertEquals(linkedList.getTail(), (Long) 2L);
    }

    @Test
    public void prepend() throws Exception {
        final LinkedList<Long> linkedList = new LinkedList<Long>();
        linkedList.prepend(null);
        assertEquals(linkedList.size, 1);

        linkedList.prepend(2L);
        assertEquals(linkedList.size, 2);
        assertEquals(linkedList.getHead(), (Long) 2L);
        assertEquals(linkedList.getTail(), null);
    }

    @Test
    public void delete() throws Exception {
        final LinkedList<Long> linkedList = new LinkedList<Long>();
        linkedList.append(3L);
        linkedList.append(4L);
        linkedList.append(5L);

        linkedList.deleteTail();
        assertEquals(linkedList.size, 2);
        assertEquals(linkedList.search(5L), null);

        linkedList.deleteHead();
        assertEquals(linkedList.size, 1);
        assertEquals(linkedList.search(3L), null);

        assertEquals(linkedList.search(4L), (Long) 4L); // middle element still remains

        linkedList.deleteHead();
        linkedList.deleteTail();
        linkedList.deleteHead();
        linkedList.deleteTail();
        assertEquals(linkedList.size, 0);
    }

    @Test
    public void search() throws Exception {
        final LinkedList<TestObject> linkedList = new LinkedList<TestObject>();
        linkedList.append(new TestObject(1,2));

        final TestObject found = linkedList.search(new TestObject(1,2));
        assertEquals(found, new TestObject(1,2));

        found.second = 3; // edit the test object within the list.

        final TestObject notFound = linkedList.search(new TestObject(1,2));
        assertEquals(notFound, null);

        final TestObject foundAgain = linkedList.search(new TestObject(1,3));
        assertEquals(foundAgain, new TestObject(1,3));
    }
}
